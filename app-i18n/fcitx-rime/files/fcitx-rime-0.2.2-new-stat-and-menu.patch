--- a/src/fcitx-rime.c
+++ b/src/fcitx-rime.c
@@ -12,6 +12,7 @@
     FcitxInstance* owner;
     RimeSessionId session_id;
     char* iconname;
+    FcitxUIMenu schemamenu;
 } FcitxRime;
 
 static void* FcitxRimeCreate(FcitxInstance* instance);
@@ -27,10 +28,14 @@
 static const char* FcitxRimeGetIMIcon(void* arg);
 static const char* FcitxRimeGetDeployIcon(void *arg);
 static const char* FcitxRimeGetSyncIcon(void *arg);
+static const char* FcitxRimeGetZhconvIcon(void *arg);
 static void FcitxRimeToggleSync(void* arg);
 static void FcitxRimeToggleDeploy(void* arg);
+static void FcitxRimeToggleZhconv(void* arg);
 static void FcitxRimeResetUI(void* arg);
 static void FcitxRimeUpdateStatus(FcitxRime* rime);
+static boolean FcitxRimeSchemaMenuAction(FcitxUIMenu *menu, int index);
+static void FcitxRimeSchemaMenuUpdate(FcitxUIMenu *menu);
 
 FCITX_EXPORT_API
 FcitxIMClass ime = {
@@ -119,13 +124,32 @@
         FcitxRimeToggleSync,
         FcitxRimeGetSyncIcon);
 
+    FcitxUIRegisterComplexStatus(
+        instance,
+        rime,
+        "rime-zhconv",
+        "",
+        "",
+        FcitxRimeToggleZhconv,
+        FcitxRimeGetZhconvIcon);
+
     FcitxUISetStatusVisable(instance, "rime-enzh", false);
     FcitxUISetStatusVisable(instance, "rime-sync", false);
     FcitxUISetStatusVisable(instance, "rime-deploy", false);
+    FcitxUISetStatusVisable(instance, "rime-zhconv", false);
     FcitxIMEventHook hk;
     hk.arg = rime;
     hk.func = FcitxRimeResetUI;
 
+    FcitxMenuInit(&rime->schemamenu);
+    rime->schemamenu.name = strdup(_("Rime Schema List"));
+    rime->schemamenu.candStatusBind = strdup("rime");
+    rime->schemamenu.MenuAction = FcitxRimeSchemaMenuAction;
+    rime->schemamenu.UpdateMenu = FcitxRimeSchemaMenuUpdate;
+    rime->schemamenu.priv = rime;
+    rime->schemamenu.isSubMenu = false;
+    FcitxUIRegisterMenu(rime->owner, &rime->schemamenu);
+
     FcitxInstanceRegisterResetInputHook(instance, hk);
 
     return rime;
@@ -138,6 +162,10 @@
         RimeDestroySession(rime->session_id);
         rime->session_id = 0;
     }
+
+    FcitxUIUnRegisterMenu(rime->owner, &rime->schemamenu);
+    FcitxMenuFinalize(&rime->schemamenu);
+
     fcitx_utils_free(rime->iconname);
     RimeFinalize();
 }
@@ -201,7 +229,14 @@
         } else {
             text = "ä¸­";
         }
+        char* zhstatus = "";
+        if (status.is_simplified) {
+            zhstatus = _("Simplified Chinese");
+        } else {
+            zhstatus = _("Traditional Chinese");
+        }
         FcitxUISetStatusString(rime->owner, "rime-enzh", text, text);
+        FcitxUISetStatusString(rime->owner, "rime-zhconv", zhstatus, zhstatus);
         RimeFreeStatus(&status);
     }
 }
@@ -401,6 +436,42 @@
     FcitxRimeUpdateStatus(rime);
 }
 
+boolean FcitxRimeSchemaMenuAction(FcitxUIMenu* menu, int index)
+{
+    FcitxRime * rime = menu->priv;
+    if (!rime->session_id) return false;
+
+    if (index == 0) {
+        RimeSetOption(rime->session_id, "ascii_mode", true);
+    } else {
+        RimeSetOption(rime->session_id, "ascii_mode", false);
+        RimeSchemaList list = {0};
+        RimeGetSchemaList(&list);
+        RimeSelectSchema(rime->session_id,list.list[index-1].schema_id);
+        RimeFreeSchemaList(&list);
+    }
+
+    return true;
+}
+
+void FcitxRimeSchemaMenuUpdate(FcitxUIMenu* menu)
+{
+    FcitxRime * rime = menu->priv;
+    if (!rime->session_id) return;
+
+    FcitxMenuClear(menu);
+
+    FcitxMenuAddMenuItem(menu, _("English"), MENUTYPE_SIMPLE, NULL);
+    RimeSchemaList list = {0};
+    if (RimeGetSchemaList(&list)) {
+        size_t i = 0;
+        for (i = 0; i < list.size; ++i) {
+            FcitxMenuAddMenuItem(menu, list.list[i].name, MENUTYPE_SIMPLE, NULL);
+        }
+        RimeFreeSchemaList(&list);
+    }
+}
+
 static const char* FcitxRimeGetIMIcon(void* arg)
 {
     FcitxRime* rime = (FcitxRime*) arg;
@@ -436,10 +507,29 @@
     return "rime-sync";
 }
 
+static const char* FcitxRimeGetZhconvIcon(void *arg)
+{
+    FcitxRime* rime = (FcitxRime*) arg;
+    if (rime->session_id) {
+        if(RimeGetOption(rime->session_id, "simplification")) {
+            return "rime-zh-simp";
+        } else {
+            return "rime-zh-trad";
+        }
+    }
+    return "";
+}
 
 void FcitxRimeToggleEnZh(void* arg)
 {
+    FcitxRime* rime = (FcitxRime*) arg;
+    if (!rime->session_id) return;
 
+    if(RimeGetOption(rime->session_id, "ascii_mode")) {
+        RimeSetOption(rime->session_id, "ascii_mode", false);
+    } else {
+        RimeSetOption(rime->session_id, "ascii_mode", true);
+    }
 }
 
 void FcitxRimeResetUI(void* arg)
@@ -456,6 +546,7 @@
     FcitxUISetStatusVisable(instance, "rime-enzh", visible);
     FcitxUISetStatusVisable(instance, "rime-sync", visible);
     FcitxUISetStatusVisable(instance, "rime-deploy", visible);
+    FcitxUISetStatusVisable(instance, "rime-zhconv", visible);
 }
 
 void FcitxRimeToggleSync(void* arg)
@@ -475,3 +566,16 @@
 
     FcitxRimeUpdateStatus(rime);
 }
+
+void FcitxRimeToggleZhconv(void* arg)
+{
+    FcitxRime* rime = (FcitxRime*) arg;
+    if (rime->session_id) {
+        if(RimeGetOption(rime->session_id, "simplification")) {
+            RimeSetOption(rime->session_id, "simplification", false);
+        } else {
+            RimeSetOption(rime->session_id, "simplification", true);
+        }
+    }
+    FcitxRimeUpdateStatus(rime);
+}
